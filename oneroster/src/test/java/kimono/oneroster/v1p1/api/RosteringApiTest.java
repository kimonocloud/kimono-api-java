/*
 * OneRoster 1.1
 * OneRoster 1.1. API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package kimono.oneroster.v1p1.api;

import kimono.oneroster.v1p1.ApiException;
import kimono.oneroster.v1p1.model.AcademicSessionResponse;
import kimono.oneroster.v1p1.model.AcademicSessionsResponse;
import kimono.oneroster.v1p1.model.ClassResponse;
import kimono.oneroster.v1p1.model.ClassesResponse;
import kimono.oneroster.v1p1.model.CourseResponse;
import kimono.oneroster.v1p1.model.CoursesResponse;
import kimono.oneroster.v1p1.model.EnrollmentResponse;
import kimono.oneroster.v1p1.model.EnrollmentsResponse;
import kimono.oneroster.v1p1.model.OrgResponse;
import kimono.oneroster.v1p1.model.OrgsResponse;
import kimono.oneroster.v1p1.model.UserResponse;
import kimono.oneroster.v1p1.model.UsersResponse;
import org.junit.Test;
import org.junit.Ignore;


/**
 * API tests for RosteringApi
 */
@Ignore
public class RosteringApiTest {

    private final RosteringApi api = new RosteringApi();

    
    /**
     * Return specific academic session.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAcademicSessionTest() throws ApiException {
        String id = null;
        AcademicSessionResponse response = api.getAcademicSession(id);

        // TODO: test validations
    }
    
    /**
     * Return collection of all academic sessions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAcademicSessionsTest() throws ApiException {
        AcademicSessionsResponse response = api.getAllAcademicSessions();

        // TODO: test validations
    }
    
    /**
     * Return collection of classes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllClassesTest() throws ApiException {
        ClassesResponse response = api.getAllClasses();

        // TODO: test validations
    }
    
    /**
     * Return collection of courses.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllCoursesTest() throws ApiException {
        CoursesResponse response = api.getAllCourses();

        // TODO: test validations
    }
    
    /**
     * Return collection of enrollments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllEnrollmentsTest() throws ApiException {
        EnrollmentsResponse response = api.getAllEnrollments();

        // TODO: test validations
    }
    
    /**
     * Return collection of grading periods. A grading period is an instance of an AcademicSession.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllGradingPeriodsTest() throws ApiException {
        AcademicSessionsResponse response = api.getAllGradingPeriods();

        // TODO: test validations
    }
    
    /**
     * Return collection of orgs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllOrgsTest() throws ApiException {
        OrgsResponse response = api.getAllOrgs();

        // TODO: test validations
    }
    
    /**
     * Return collection of Schools. A School is an instance of an Org.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllSchoolsTest() throws ApiException {
        OrgsResponse response = api.getAllSchools();

        // TODO: test validations
    }
    
    /**
     * Return collection of students. A student is an instance of a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllStudentsTest() throws ApiException {
        UsersResponse response = api.getAllStudents();

        // TODO: test validations
    }
    
    /**
     * Return collection of teachers. A teacher is an instance of a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTeachersTest() throws ApiException {
        UsersResponse response = api.getAllTeachers();

        // TODO: test validations
    }
    
    /**
     * Return collection of terms. A Term is an instance of an AcademicSession.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTermsTest() throws ApiException {
        AcademicSessionsResponse response = api.getAllTerms();

        // TODO: test validations
    }
    
    /**
     * Return collection of users.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllUsersTest() throws ApiException {
        UsersResponse response = api.getAllUsers();

        // TODO: test validations
    }
    
    /**
     * Return specific class.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClassTest() throws ApiException {
        String id = null;
        ClassResponse response = api.getClass(id);

        // TODO: test validations
    }
    
    /**
     * Return specific course.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCourseTest() throws ApiException {
        String id = null;
        CourseResponse response = api.getCourse(id);

        // TODO: test validations
    }
    
    /**
     * Return specific enrollment.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnrollmentTest() throws ApiException {
        String id = null;
        EnrollmentResponse response = api.getEnrollment(id);

        // TODO: test validations
    }
    
    /**
     * Return specific grading period. A grading period is an instance of an academic session.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGradingPeriodTest() throws ApiException {
        String id = null;
        AcademicSessionResponse response = api.getGradingPeriod(id);

        // TODO: test validations
    }
    
    /**
     * Return specific org.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrgTest() throws ApiException {
        String id = null;
        OrgResponse response = api.getOrg(id);

        // TODO: test validations
    }
    
    /**
     * Return specific School.  A School is an instance of an Org.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchoolTest() throws ApiException {
        String id = null;
        OrgResponse response = api.getSchool(id);

        // TODO: test validations
    }
    
    /**
     * Return specific student. A student is an instance of a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStudentTest() throws ApiException {
        String id = null;
        UserResponse response = api.getStudent(id);

        // TODO: test validations
    }
    
    /**
     * Return the collection of students attending this school.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStudentsForSchoolTest() throws ApiException {
        String schoolId = null;
        UsersResponse response = api.getStudentsForSchool(schoolId);

        // TODO: test validations
    }
    
    /**
     * Return specific teacher. A teacher is an instance of a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeacherTest() throws ApiException {
        String id = null;
        UserResponse response = api.getTeacher(id);

        // TODO: test validations
    }
    
    /**
     * Return the collection of teachers teaching at this school.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeachersForSchoolTest() throws ApiException {
        String schoolId = null;
        UsersResponse response = api.getTeachersForSchool(schoolId);

        // TODO: test validations
    }
    
    /**
     * Return specific term. A Term is an instance of an AcademicSession.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTermTest() throws ApiException {
        String id = null;
        AcademicSessionResponse response = api.getTerm(id);

        // TODO: test validations
    }
    
    /**
     * Return specific user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String id = null;
        UserResponse response = api.getUser(id);

        // TODO: test validations
    }
    
}
