/*
 * Broker API
 * Broker APIs provide access to Kimono Broker resources and operations
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package kimono.api.v2.broker.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MessageAck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-06T14:46:47.172-06:00[America/Denver]")
public class MessageAck {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private java.util.UUID id;

  /**
   * Gets or Sets disposition
   */
  @JsonAdapter(DispositionEnum.Adapter.class)
  public enum DispositionEnum {
    SUCCESS("success"),
    
    WARNING("warning"),
    
    ERROR("error"),
    
    RETRY("retry");

    private String value;

    DispositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DispositionEnum fromValue(String text) {
      for (DispositionEnum b : DispositionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<DispositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DispositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DispositionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DispositionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_DISPOSITION = "disposition";
  @SerializedName(SERIALIZED_NAME_DISPOSITION)
  private DispositionEnum disposition;

  public static final String SERIALIZED_NAME_ERROR_INFO = "errorInfo";
  @SerializedName(SERIALIZED_NAME_ERROR_INFO)
  private java.util.Map<String, String> errorInfo = null;

  public static final String SERIALIZED_NAME_ACTIVITY_INFO = "activityInfo";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_INFO)
  private java.util.Map<String, String> activityInfo = null;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private java.util.Map<String, String> params = null;

  public MessageAck id(java.util.UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public java.util.UUID getId() {
    return id;
  }

  public void setId(java.util.UUID id) {
    this.id = id;
  }

  public MessageAck disposition(DispositionEnum disposition) {
    this.disposition = disposition;
    return this;
  }

   /**
   * Get disposition
   * @return disposition
  **/
  @ApiModelProperty(value = "")
  public DispositionEnum getDisposition() {
    return disposition;
  }

  public void setDisposition(DispositionEnum disposition) {
    this.disposition = disposition;
  }

  public MessageAck errorInfo(java.util.Map<String, String> errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

  public MessageAck putErrorInfoItem(String key, String errorInfoItem) {
    if (this.errorInfo == null) {
      this.errorInfo = new java.util.HashMap<>();
    }
    this.errorInfo.put(key, errorInfoItem);
    return this;
  }

   /**
   * Get errorInfo
   * @return errorInfo
  **/
  @ApiModelProperty(value = "")
  public java.util.Map<String, String> getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(java.util.Map<String, String> errorInfo) {
    this.errorInfo = errorInfo;
  }

  public MessageAck activityInfo(java.util.Map<String, String> activityInfo) {
    this.activityInfo = activityInfo;
    return this;
  }

  public MessageAck putActivityInfoItem(String key, String activityInfoItem) {
    if (this.activityInfo == null) {
      this.activityInfo = new java.util.HashMap<>();
    }
    this.activityInfo.put(key, activityInfoItem);
    return this;
  }

   /**
   * Get activityInfo
   * @return activityInfo
  **/
  @ApiModelProperty(value = "")
  public java.util.Map<String, String> getActivityInfo() {
    return activityInfo;
  }

  public void setActivityInfo(java.util.Map<String, String> activityInfo) {
    this.activityInfo = activityInfo;
  }

  public MessageAck params(java.util.Map<String, String> params) {
    this.params = params;
    return this;
  }

  public MessageAck putParamsItem(String key, String paramsItem) {
    if (this.params == null) {
      this.params = new java.util.HashMap<>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @ApiModelProperty(value = "")
  public java.util.Map<String, String> getParams() {
    return params;
  }

  public void setParams(java.util.Map<String, String> params) {
    this.params = params;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageAck messageAck = (MessageAck) o;
    return Objects.equals(this.id, messageAck.id) &&
        Objects.equals(this.disposition, messageAck.disposition) &&
        Objects.equals(this.errorInfo, messageAck.errorInfo) &&
        Objects.equals(this.activityInfo, messageAck.activityInfo) &&
        Objects.equals(this.params, messageAck.params);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, disposition, errorInfo, activityInfo, params);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageAck {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    disposition: ").append(toIndentedString(disposition)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("    activityInfo: ").append(toIndentedString(activityInfo)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

