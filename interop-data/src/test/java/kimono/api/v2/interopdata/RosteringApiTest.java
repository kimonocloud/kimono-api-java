/*
 * Interop Data API
 * Interop Data APIs provide access to the data objects and events from Interop Cloud repositories and Integration repositories
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package kimono.api.v2.interopdata;

import kimono.api.v2.interopdata.ApiException;
import kimono.api.v2.interopdata.model.Course;
import kimono.api.v2.interopdata.model.CoursesResponse;
import kimono.api.v2.interopdata.model.Org;
import kimono.api.v2.interopdata.model.OrgResponse;
import kimono.api.v2.interopdata.model.OrgsResponse;
import kimono.api.v2.interopdata.model.Person;
import kimono.api.v2.interopdata.model.PersonsResponse;
import kimono.api.v2.interopdata.model.Section;
import kimono.api.v2.interopdata.model.SectionsResponse;
import kimono.api.v2.interopdata.model.Term;
import kimono.api.v2.interopdata.model.TermsResponse;
import org.junit.Test;
import org.junit.Ignore;


/**
 * API tests for RosteringApi
 */
@Ignore
public class RosteringApiTest {

    private final RosteringApi api = new RosteringApi();

    
    /**
     * Find a Course by $sys.id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findCourseTest() throws ApiException {
        java.util.UUID id = null;
        Course response = api.findCourse(id);

        // TODO: test validations
    }
    
    /**
     * Find an LEA-type Org by $sys.id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findLEATest() throws ApiException {
        java.util.UUID id = null;
        Org response = api.findLEA(id);

        // TODO: test validations
    }
    
    /**
     * Find an Org by $sys.id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrgTest() throws ApiException {
        java.util.UUID id = null;
        OrgResponse response = api.findOrg(id);

        // TODO: test validations
    }
    
    /**
     * Find a Person by $sys.id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPersonTest() throws ApiException {
        java.util.UUID id = null;
        Person response = api.findPerson(id);

        // TODO: test validations
    }
    
    /**
     * Find a Section by $sys.id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSectionTest() throws ApiException {
        java.util.UUID id = null;
        Section response = api.findSection(id);

        // TODO: test validations
    }
    
    /**
     * Find a Term by $sys.id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTermTest() throws ApiException {
        java.util.UUID id = null;
        Term response = api.findTerm(id);

        // TODO: test validations
    }
    
    /**
     * List all Courses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoursesTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        CoursesResponse response = api.listCourses(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List Courses that belong to an Org
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoursesForOrgTest() throws ApiException {
        java.util.UUID id = null;
        Integer page = null;
        Integer pageSize = null;
        CoursesResponse response = api.listCoursesForOrg(id, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List all LEA-type Orgs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLEAsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        OrgsResponse response = api.listLEAs(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List all Orgs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrgsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        OrgsResponse response = api.listOrgs(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get all Persons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPersonsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        PersonsResponse response = api.listPersons(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List all School-type Orgs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSchoolsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        OrgsResponse response = api.listSchools(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List all Sections
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSectionsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        SectionsResponse response = api.listSections(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List Sections that belong to an Org
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSectionsForOrgTest() throws ApiException {
        java.util.UUID id = null;
        Integer page = null;
        Integer pageSize = null;
        SectionsResponse response = api.listSectionsForOrg(id, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List all Student-type Persons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listStudentsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        PersonsResponse response = api.listStudents(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List Students that are members of an Org
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listStudentsForOrgTest() throws ApiException {
        java.util.UUID id = null;
        Integer page = null;
        Integer pageSize = null;
        PersonsResponse response = api.listStudentsForOrg(id, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List all Teacher-type Persons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTeachersTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        PersonsResponse response = api.listTeachers(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List Teachers that are members of an Org
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTeachersForOrgTest() throws ApiException {
        java.util.UUID id = null;
        Integer page = null;
        Integer pageSize = null;
        PersonsResponse response = api.listTeachersForOrg(id, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List all Terms
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTermsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        TermsResponse response = api.listTerms(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List Terms that belong to an Org
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTermsForOrgTest() throws ApiException {
        java.util.UUID id = null;
        Integer page = null;
        Integer pageSize = null;
        TermsResponse response = api.listTermsForOrg(id, page, pageSize);

        // TODO: test validations
    }
    
}
